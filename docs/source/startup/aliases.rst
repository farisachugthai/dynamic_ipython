==============
System Aliases
==============
.. highlight:: ipython

.. currentmodule:: default_profile.startup.20_aliases

To date there are well over 100 aliases manually added to the shell.

These aliases depend on the operating system used as Linux OSes will default
to a :command:`bash` system shell, and Windows will have :command:`dosbatch` or
:command:`powershell` shells.


.. _aliases-overview:

Overview
--------

This module utilizes ``_ip``, the global |ip|
instance, and fills the ``user_ns`` with aliases that are available
in a typical system shell.

Unfortunately, the exact definition of what a system shell is, what language
it responds to, and it's ability to receive and pass along input and output
in pipelines will vary greatly.

As a result, the module needs to test the user's OS, what shell they're using
and what executables are available on the :envvar:`PATH`.

On Unix platforms, it is assumed that the user is using a bash shell.

However on Windows, it is possible that the user has a shell that runs
:command:`dosbatch`, :command:`powershell`, or :command:`bash`.

As a result, the environment variable :envvar:`COMSPEC` will be checked,
and if present, that value is used.


.. _aliases-notes:

Notes
------

When writing aliases, an ``%alias`` definition can take various string
placeholders. As per the official documentation:


.. _aliases-attributes:

Attributes
----------

_ip : |ip|
    A global object representing the active IPython session.
    Contains varying packages as well as the current global namespace.
    Doesn't need to be defined in advance during an interactive session.


.. _aliases-parmeters:

`%alias` magic
==============

.. magic:: alias

The official IPython documentation notes.:

.. ipython::

    In [2]: %alias bracket echo "Input in brackets: <%l>"
    In [3]: bracket hello world
    Input in brackets: <hello world>

Note that we quote when in the configuration file but when running `%alias`
interactively the syntax '`%alias` alias_name cmd' doesn't require quoting.

Aliases expand Python variables just like system calls using :kbd:`!` 
or :kbd:`!!` do: all expressions prefixed with :kbd:`$` get expanded.
For details of the semantic rules, see :pep:`215`:

This is the library used by IPython for variable expansion.

Parameters
----------

``%l`` : Command-line argument.
    You can use the ``%l`` specifier in an ``%alias`` definition
    to represent the whole line when the alias is called.

Meaning that it behaves similarly to the parameter :kbd:`$*`
in typical POSIX shells.

Alternatively the parameter:
``%s``
can be given.

.. seealso::

   :mod:`IPython.core.alias`
       Module where the alias functionality for IPython is defined and the basic
       implementation scaffolded.


Roadmap
--------

Create a class with instance attributes for `sys.platform`.
Break linux up like so::

    class AliasOSAgnostic:

        def __init__(self):
            self._sys.platform = sys.platform().lower()

        @property
        def has_alias(self):
            return ....

    class LinuxAlias(AliasOSAgnostic):

        def busybox(self):
            aliases = [
                ('cd', 'cd foo %l'),
                ...
                ('ls', 'ls -F --color=always %l)
            ]

        def standardubuntu(self):
            aliases = [
                ('ag', 'ag -l %l')
                ('rg', 'way too many options')
            ]

Then maybe implement either a factory function or a factory manager but
I haven't fleshed that part out in my head.

This may have to take the back-burner as I reorganize the rest of
the repo.

I think that :command:`declare -f` could have a nice tie in to
`inspect.is_function` or whatever.

Linux Aliases
-------------

Aliases that have either:

- Only been tested on Linux

- Only natively exist on Linux

- Clobber an existing Windows command

   - cmd has a few overlapping commands like :command:`find`.

   - powershell intentionally has many aliases that match `busybox`
     aliases, with commands like 'ls' and 'curl' already mapped to
     pwsh builtins.

Packages such as ConEmu or Cmder allow a large number of GNU/Linux
built-ins to exist on Windows, and as a result, the list may not be
comprehensive and it may be that a reasonable
portion of these aliases can be successfully executed from a shell
such as Cygwin, Msys2, MinGW, Git on Windows or the Windows
Subsystem for Linux.

.. _aliases-api-docs:

Autogenerated Documentation
---------------------------
.. magic:: unalias

.. automodule:: default_profile.startup.20_aliases
   :synopsis: Generate OS specific aliases to aide in use as a system shell.
   :members:
   :undoc-members:
   :show-inheritance:
