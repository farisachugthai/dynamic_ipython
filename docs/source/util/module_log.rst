.. currentmodule:: default_profile.util.module_log

===============================================
:mod:`~default_profile.util.module_log` module
===============================================


Summary
========

Set up easily instantiated :class:`logging.Logger` instances.

Create a few formatters and logging instances that can be easily
imported and utilized across the package.

Currently :func:`~default_profile.util.module_log.stream_logger`
is the easiest and most oft used entry point in this module.

Exceptions
===========

:exc:`NoUnNamedLoggers`
    Exception raised when a function in this module is called without a
    name argument for the logger.

Stream Logging
==============

.. function:: stream_logger(logger, log_level=logging.INFO, msg_format=None)
   :noindex:

   Returns a fully functional Logger instance for ready use.


Stream Logging Examples
-------------------------

.. testsetup::

    >>> import logging
    >>> import default_profile

.. doctest::

    >>> from default_profile.util import module_log
    >>> module_log.stream_logger(logging.getLogger(__name__))


File Logging
================

.. function:: file_logger(filename, logger=None, shell=None, log_level=None, msg_format=None
   :noindex:

    Logging function that emits a :class:`logging.LogRecord` to ``filename``.
    Logger uses the following formatting by default.:

       %(asctime)s : %(levelname)s : %(message)s

    :param filename: str
       File to log a :class:`logging.LogRecord` to.

    :param logger: :class:`logging.Logger`, optional
       A :class:`logging.Logger` instantiated in the calling module.

    shell : |ip|, optional
       Global instance of IPython. Can be **None** if not run in
       :mod:`IPython` though this hasn't been tested.

    log_level : int, optional
       Level of log records.

    msg_format : str, optional
       Representation of logging messages using parameters accepted by
       :class:`logging.Formatter`. Uses standard :kbd:`%` style
       string formatting.

   :param logger: :class:`logging.Logger` instance

   :raises AssertionError: 
      *shell* is not `isinstance` |ip|.


JSON logger
===========

Set up a logger that returns properly formatted JSON.


Parameters
----------

logger : str or :class:`logging.Logger`, optional
   Either a named Logger instance or the string representing the desired instance

json_formatter : :class:`logging.Formatter`, optional `JSONFormatter` instance.
   Included in the listed parameters to be explicit; however, it's
   probably easier to not include the parameter as one is configured
   in the function anyway.

Returns
-------

root_logger : :class:`logging.Logger`
   Instance of a :class:`logging.Logger()`.


Examples
--------

.. doctest::

   >>> import logging
   >>> from default_profile.util.module_log import json_logger, JsonFormatter
   >>> root_logger = json_logger(JsonFormatter=JsonFormatter())
   >>> root_logger.warn('this is a test message')
   >>> root_logger.debug('this request_id=%d name=%s', 1, 'John')


Autogenerated --- Package wide logging
======================================

.. automodule:: default_profile.util.module_log
   :synopsis: Easy to use standardized package-wide logging.
   :members:
   :undoc-members:
   :show-inheritance:
