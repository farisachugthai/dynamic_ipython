==========================================
:mod:`~default_profile.util.pager2` module
==========================================

.. currentmodule:: default_profile.util.pager2

Rewrite the module that creates the `%pycat` magic.

In it's current implementation, the pager gives Windows a dumb terminal and
never checks for whether :command:`less` is on the :envvar:`PATH` or
if the user has a pager they would like to implement!


Revisions
----------
.. magic:: pycat

Still considering different ways of designing a new Windows specific pager
on IPython. It's a bit difficult as the default implementation is over 10
years old, and it seems to mirror a similar setup from :mod:`pydoc` where a
Windows user who doesn't have :envvar:`PAGER` set will use a home-brewed
:command:`more` lite type pager.

However, I haven't found anywhere in the docs where this is mentioned which
is frustrating.

.. _pydoc-bug:

Original Pydoc Implementation and Errors
----------------------------------------
Running `pydoc` with `PAGER` set on Windows doesn't catch the `KeyboardInterrupt`. ...

.. code-block:: bash

   $ pydoc FRAMEOBJECTS

.. code-block:: py3tb

   Traceback (most recent call last):
   File "C:/tools/miniconda3/lib/runpy.py", line 193, in _run_module_as_main
      "__main__", mod_spec)
   File "C:/tools/miniconda3/lib/runpy.py", line 85, in _run_code
      exec(code, run_globals)
      elif request in self.topics: self.showtopic(request)
   File "C:/tools/miniconda3/lib/pydoc.py", line 2021, in showtopic
      return self.showtopic(target, more_xrefs)
   File "C:/tools/miniconda3/lib/pydoc.py", line 2037, in showtopic
      pager(doc)
   File "C:/tools/miniconda3/lib/pydoc.py", line 1449, in pager
      pager(text)
   File "C:/tools/miniconda3/lib/pydoc.py", line 1462, in <lambda>
      return lambda text: tempfilepager(plain(text), use_pager)
   File "C:/tools/miniconda3/lib/pydoc.py", line 1519, in tempfilepager
      os.system(cmd + ' "' + filename + '"')
   KeyboardInterrupt

Outside of the stupid traceback, that command worked perfectly for me.

I have :envvar:`PAGER` set on Windows {which I realize isn't typical},
however we should re-use this implementation entirely and cut
`IPython.core.page.page` out.

Also worth noting `IPython.core.payloadpage.page`.:

.. code-block:: python

   pydoc.pipepager(inspect.getdoc(arg), os.environ.get('PAGER'))

Despite the source code of the std lib stating that pipes are completely
broken on windows, this worked just fine for me.

Define 'arg' as an object like if you pass a string it'll give you the help
message for a str.

:mod:`inspect` has a million more methods and pydoc does too so possibly change
the :func:`inspect.getdoc` part, but honestly that one line is 80% of the way to
what I've been trying to do.

Autogenerated Pager Docs
========================

.. automodule:: default_profile.util.pager2
   :synopsis: Rewrite how IPython utilizes the pager on Windows.
   :members:
   :undoc-members:
   :show-inheritance:
