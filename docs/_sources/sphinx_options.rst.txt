========================
Sphinx Directive Options
========================

The IPython directive is a stateful shell that can be used in reStructured
text files.

The Sphinx documentation project, for those who are unfamiliar, can be used
to automatically extract docstrings from valid python code and
generate HTML.

The IPython directive builds on the functionality that Sphinx
provides. This allows a user to, for example, copy and paste an
interactive session in an .rst document that can be useful for parsing
and validating IPython code, auto-generating documentation based on the
docstrings in source code, and embedding plots based on live data in
Sphinx documents.

Specifically, the IPython Sphinx extension correctly parses standard
IPython prompts, and extracts the input and output lines to generate HTML.


Directive and options
=====================

.. rst:directive:: ipython

   Create an IPython directive.

   .. rst:directive:option:: doctest: Run a doctest on IPython code blocks in rst.

   .. rst:directive:option:: python: Used to indicate that the relevant code block does not have IPython prompts.

   .. rst:directive:option:: okexcept: Allow the code block to raise an exception.

   .. rst:directive:option:: okwarning: Allow the code block to emit an warning.

   .. rst:directive:option:: suppress: Silence any warnings or expected errors.

   .. rst:directive:option:: verbatim: A noop that allows for any text to be syntax highlighted as valid IPython code.

   .. rst:directive:option:: savefig: Save output from matplotlib to *outfile*.
                                      OUTFILE [IMAGE_OPTIONS]


One may find it useful to reference the relevant documentation from the
[Sphinx]_  project and Docutils.

.. [Sphinx] http://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#the-restructuredtext-domain

.. seealso::

   `The Sphinx documentation project <http://www.sphinx-doc.org/en/master/>`_ has phenomenal documentation and provides a good reference when working with rst files.


   In addition the source for each page of the documentation
   is easily obtainable from the "Show Source" button.

.. seealso::

   `Image Options for rst directives from docutils
   <http://docutils.sourceforge.net/docs/ref/rst/directives.html#image>`_ for details.

.. seealso:: :ref:`configuration-values`

   Check towards the bottom of this document to view all IPython configuration options.



Configuring the Build Environment
=================================

I want to put this in the docstrings of those functions with the `env`
parameter that kept tripping me up. (ref)

.. glossary::

   environment
      A structure where information about all documents under the root is saved,
      and used for cross-referencing.  The environment is pickled after the
      parsing stage, so that successive runs only need to read and parse new and
      changed documents.


Supported Pseudo-Decorators
============================

Here are the supported decorators, and any optional arguments they
take.  Some of the decorators can be used as options to the entire
block (e.g. `@verbatim` and `@suppress`), and some only apply to the
line just below them (eg `@savefig`).:

.. _pseudo-decorators:

Decorators Glossary
-------------------------

.. glossary::

   @suppress
       Execute the IPython input block, but :dfn:`@suppress` the input and output
       block from the rendered output.  Also, can be applied to the entire
       ``.. ipython`` block as a directive option with ``:suppress:``.

   @verbatim
       Insert the input and output block in :dfn:`@verbatim`, but auto-increment
       the line numbers. Internally, the interpreter will be fed an empty
       string, so it is a no-op that keeps line numbering consistent.
       Also, can be applied to the entire ``.. ipython`` block as a
       directive option with ``:verbatim:``.

   @savefig
      Save the target of the directive to :dfn:`outfile`.
      *I think I'm just gonna rewrite this entire paragraph.*
      Save the figure to the static directory and insert it into the
      document, possibly binding it into a mini-page and/or putting
      code/figure label/references to associate the code and the figure.
      Takes args to pass to the image directive (*scale*,
      *width*, etc can be ``**kwargs``)

   @doctest
      Compare the pasted in output in the IPython block with the output
      generated at doc build time, and raise errors if they don't
      match. Also, can be applied to the entire ``.. ipython`` block as a
      directive option with ``:doctest:``.

   @suppress
      execute the ipython input block, but suppress the input and output
      block from the rendered output.  Also, can be applied to the entire
      ``..ipython`` block as a directive option with ``:suppress:``.

   @okexcept
      Actually is this a decorator?

   @okwarning
      What about this one?

   @python
      This can't be.


.. todo:: Document the magics.py sphinx extension!!

   The ``.. magic::`` directive doesn't appear to be documented at all.


.. _configuration-values:

Configuration Values
=====================

The configurable options that can be placed in conf.py are:

.. confval:: ipython_savefig_dir

   The directory in which to save the figures. This is
   relative to the
   Sphinx source directory. The default is `html_static_path`.

.. confval:: ipython_rgxin

   The compiled regular expression to denote the start of
   IPython input lines.
   The default is `re.compile('In \\[(\\d+)\\]:\\s?(.*)\\s*')`.
   You shouldn't need to change this.

.. confval:: ipython_warning_is_error: [default to True]

   Fail the build if something unexpected happen, for example
   if a block raise an exception but does not have the
   `:okexcept:` flag. The exact behavior of
   what is considered strict, may change between the sphinx
   directive version.

.. confval:: ipython_rgxout

   The compiled regular expression to denote the start of
   IPython output lines. The default is
   `re.compile('Out\\[(\\d+)\\]:\\s?(.*)\\s*')`.
   You shouldn't need to change this.

.. confval:: ipython_promptin

    The string to represent the IPython input prompt in the generated ReST.
    The default is ``'In [%d]:'``. This expects that the line
    numbers are used in the prompt.

.. confval:: ipython_promptout

    The string to represent the IPython prompt in the generated ReST. The
    default is ``'Out [%d]:'``. This expects that the line numbers are used
    in the prompt.

.. confval:: ipython_mplbackend

    The string which specifies if the embedded Sphinx shell should import
    Matplotlib and set the backend. The value specifies a backend that is
    passed to `matplotlib.use()` before any lines in `ipython_execlines` are
    executed. If not specified in conf.py, then the default value of 'agg' is
    used. To use the IPython directive without matplotlib as a dependency, set
    the value to `None`. It may end up that matplotlib is still imported
    if the user specifies so in `ipython_execlines` or makes use of the
    `@savefig` pseudo decorator.

.. confval:: ipython_execlines

    A list of strings to be exec'd in the embedded Sphinx shell. Typical
    usage is to make certain packages always available. Set this to an empty
    list if you wish to have no imports always available. If specified in
    ``conf.py`` as `None`, then it has the effect of making no imports available.

    If omitted from conf.py altogether, then the default value of:
       ['import numpy as np', 'import matplotlib.pyplot as plt']
    is used.

.. confval:: ipython_holdcount

    When the `@suppress` pseudo-decorator is used, the execution count can be
    incremented or not. The default behavior is to hold the execution count,
    corresponding to a value of `True`. Set this to `False` to increment
    the execution count after each suppressed command.

As an example, to use the IPython directive when `matplotlib` is not available,
one sets the backend to `None`:

    `ipython_mplbackend` = `None`


To view the API documentation, continue reading at `sphinx_ipython_api`.

.. Vim: set et:
