==============
Prompt Toolkit
==============

.. module:: prompt_toolkit_modules
   :synopsis: Combined docs on all prompt_toolkit modules.


This module begins the section of the repository that entails more advanced
customization of prompt_toolkit.

Lower level constructs like widgets, toolbars and eventually the Layout classes
are utilized quite heavily.


`~default_profile.startup.32_kb`
===========================================

.. automodule:: default_profile.startup.32_kb
   :synopsis: Begin reworking prompt_toolkit's keybindings.
   :members:
   :undoc-members:
   :show-inheritance:


:mod:`~default_profile.startup.33_bottom_toolbar`
==================================================

.. admonition:: Be careful what the bottom toolbar is set to.

   It's not very difficult to crash the entire application as a result of
   giving it the wrong type.

The |ip|\.`pt_app.bottom_toolbar` type is expected to be some kind of
`FormattedText`. Unfortunately, feeding it an already populated control like a
`FormattedTextToolbar` will break the application.

Don't run.:

.. parsed-literal::

    bottom_toolbar = FormattedTextToolbar(bottom_text)
    shell.pt_app.bottom_toolbar = bottom_toolbar

Note that a similar expression is used to assign the `BottomToolbar`
to the shell's *pt_app.bottom_toolbar* attribute.::

   from prompt_toolkit.formatted_text import FormattedText
   from IPython import get_ipython

   bottom_text = BottomToolbar()
   bottom_toolbar = FormattedText(bottom_text.rerender())

However, the `FormattedText` in and of itself doesn't provide any functionality.
A `FormattedText` object is simply a subclass of `list`. The value is provided
in defining a method ``__pt_formatted_text__``.

As a result, `BottomToolbar` also defines this method and as a result an
instance of the class can be passed directly as an assignment to the
``_ip.pt_app.bottom_toolbar``.


Toolbar API
-----------

.. automodule:: default_profile.startup.33_bottom_toolbar
   :synopsis: Generate a toolbar using lower-level controls.
   :members:
   :undoc-members:
   :show-inheritance:


:mod:`~default_profile.startup.35_lexer`
===========================================

.. currentmodule:: default_profile.startup.35_lexer

Build our lexer in addition to utilizing already built ones.

Pygments, IPython, prompt_toolkit, Jinja2 and Sphinx all come
with their own concepts of lexers which doesn't include
the built-in modules.:

- :mod:`parser`

- :mod:`token`

- :mod:`tokenizer`

- :mod:`re`

- :mod:`ast`

So it'd be tough to say we're at a lack of tools!

.. class:: IPythonConfigurableLexer

   A class to merge the seemingly disjoint APIs of IPython, traitlets,
   prompt_toolkit and pygments.

   TODO: The `IPython.terminal.lexer.IPythonPTLexer` also should have a few
   of these attributes as well.

    And here's how you join the bridge.

.. class:: PygmentsLexer(Lexer):

   Lexer that calls a pygments lexer.

   Example::

      from pygments.lexers.html import HtmlLexer
      lexer = PygmentsLexer(HtmlLexer)

   Note: Don't forget to also load a Pygments compatible style. E.g.::

      from prompt_toolkit.styles.from_pygments import style_from_pygments_cls
      from pygments.styles import get_style_by_name
      style = style_from_pygments_cls(get_style_by_name('monokai'))

   :param pygments_lexer_cls: A `Lexer` from Pygments.
   :param sync_from_start: Start lexing at the start of the document. This
                           will always give the best results, but it will be
                           slow for bigger documents. (When the last part of the
                           document is display, then the whole document will be
                           lexed by Pygments on every key stroke.) It is
                           recommended to disable this for inputs that are
                           expected to be more than 1,000 lines.
   :param syntax_sync: `SyntaxSync` object.


Lexer Autogenerated Docs
------------------------

.. automodule:: default_profile.startup.35_lexer
   :synopsis: Generate a lexer to provide syntax highlighting in the REPL.
   :members:
   :undoc-members:
   :show-inheritance:


:mod:`~default_profile.startup.ptoolkit`
===========================================

.. automodule:: default_profile.startup.ptoolkit
   :synopsis: Toolkit for prompt_toolkit.
   :members:
   :undoc-members:
   :show-inheritance:


:mod:`~default_profile.startup.completions`
===========================================

.. automodule:: default_profile.startup.completions
   :synopsis: Autocompletion for the REPL.
   :members:
   :undoc-members:
   :show-inheritance:
