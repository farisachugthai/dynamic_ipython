#!/usr/bin/env python
# -*- coding: utf-8 -*-
import shutil
# import sys
import subprocess
# from subprocess import Popen, PIPE
import warnings

from IPython.core.getipython import get_ipython
from IPython.core.magic import Magics, magics_class, line_magic
from IPython.core.magics.packaging import (
    # CONDA_ENV_FLAGS,
    # CONDA_YES_FLAGS,
    # CONDA_COMMANDS_REQUIRING_YES,
    # CONDA_COMMANDS_REQUIRING_PREFIX,
    PackagingMagics,
)
from IPython.terminal.interactiveshell import TerminalInteractiveShell

try:
    from ipykernel.ipkernel import IPythonKernel as kernel
except ImportError:
    warnings.warn('ipykernel not installed.')


@magics_class
class PackagingMagics(Magics):
    """Override the PackagingMagic."""

    @staticmethod
    def conda_path():
        return shutil.which("conda")

    @property
    def stdin_disabled(self):
        return getattr(self.shell, kernel, None)

    @line_magic
    def conda(self, line):
        """Simpler re-implemented line magic.

        First do a shutil check.

        Parameters
        ----------
        line : str
            remainder of line

        Raises
        ------
        :exc:`NotImplementedError`

        """
        # if self.stdin_disabled is not None:
        # hang on this doesn't seem like a good idea.
        # cmd.append(self.non_interactive_parameters(cmd))
        # raise NotImplementedError
        conda, *cmd = line

        # tbf i still question if that's a good way of checking interactivity
        try:
            if isinstance(self.shell, TerminalInteractiveShell):
                return subprocess.run([conda, *cmd], )
        except subprocess.CalledProcessError:
            # except AttributeError:
            #     raise NotImplementedError
            if self.conda_path is not None and self.conda_path.ends_with("bat"):
                return %sx "call " + self.conda_path

    def python_api(self):
        """TODO

        :return:
        :rtype:
        """
        try:
            from conda.cli import python_api
        except ImportError:
            return


def load_ipython_extension(ip=None):
    if ip is None:
        ip = get_ipython()
    ip.register_magics(PackagingMagics)
    ip.register_magic_function(PackagingMagics().conda)
