#!/usr/bin/env python
# -*- coding: utf-8 -*-
# You know what would be useful that ipython doesn't use?
# They have line as a parameter to most magics.
# I just found out about argparse.Remainder today
import shutil
import shlex
import subprocess
import sys
import warnings
from typing import AnyStr

from IPython.core.getipython import get_ipython
from IPython.core.magic import Magics, magics_class, line_magic
from IPython.core.magics.packaging import (
    PackagingMagics,
    CONDA_ENV_FLAGS,
    CONDA_COMMANDS_REQUIRING_PREFIX,
    CONDA_YES_FLAGS,
    CONDA_COMMANDS_REQUIRING_YES,
)
from IPython.terminal.interactiveshell import TerminalInteractiveShell

try:
    from ipykernel.ipkernel import IPythonKernel as kernel
except ImportError:
    warnings.warn("ipykernel not installed.")


@magics_class
class PackagingMagics(Magics):
    """Override the PackagingMagic."""

    @staticmethod
    def _get_conda_executable() -> AnyStr:
        # If necessary call their goofy ass way but then i can't use conda the env
        # manager outside of that env.
        return shutil.which("conda")

    @property
    def stdin_disabled(self):
        return getattr(self.shell, kernel, None)

    @line_magic
    def conda(self, line, extra_args=None):
        """Simpler re-implemented line magic.

        Usage:

            %conda install [pkgs]

        Parameters
        ----------
        line : str
            remainder of line

        Raises
        ------
        :exc:`NotImplementedError`

        """
        # uh wth. i was trying to run conda build from a pipenv and it crashed guys
        # if not _is_conda_environment():
        #     raise ValueError(
        #         "The python kernel does not appear to be a conda environment.  "
        #         "Please use ``%pip install`` instead."
        # )

        conda = self._get_conda_executable()
        # now before we start slicing shit and going crazy let's do a few checks riht?
        if line == "" or line == "-h" or line == "--help":
            # conda with no args should be the same as running conda help
            return self.shell.system([conda, "-h"])
        unsplit_args = shlex.split(line)
        # and we didn't even unpack the list correctly?
        command, args = unsplit_args[:]

        # When the subprocess does not allow us to respond "yes" during the installation,
        # we need to insert --yes in the argument list for some commands
        stdin_disabled = getattr(self.shell, "kernel", None) is not None
        needs_yes = command in CONDA_COMMANDS_REQUIRING_YES
        has_yes = set(args).intersection(CONDA_YES_FLAGS)
        if stdin_disabled and needs_yes and not has_yes:
            extra_args.append("--yes")

        # Add --prefix to point conda installation to the current environment
        needs_prefix = command in CONDA_COMMANDS_REQUIRING_PREFIX
        has_prefix = set(args).intersection(CONDA_ENV_FLAGS)
        if needs_prefix and not has_prefix:
            extra_args.extend(["--prefix", sys.prefix])

        self.shell.system(" ".join([conda, command] + extra_args + args))
        if not self.quiet:
            print("\nNote: you may need to restart the kernel to use updated packages.")

    def python_api(self):
        """TODO

        :return:
        :rtype:
        """
        try:
            from conda.cli import python_api
        except ImportError:
            return


def load_conda_magic():
    ip = get_ipython()
    if ip is None:
        return
    instance = PackagingMagics(shell=ip)
    ip.register_magics(instance)
    ip.register_magic_function(instance.conda)
    # in case anyone wants to inspect the body before it gets cold
    return instance
