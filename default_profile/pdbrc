# https://github.com/python/cpython/blob/3.7/Lib/pdb.py#L1380
import inspect
import os
import readline
import rlcompleter
import traceback
from inspect import getmembers
from pprint import pprint

try:
    from default_profile.pdbrc import debugger
except ImportError:
    debugger = None

from IPython.core.magics.namespace import NamespaceMagics

# eval(compile(".pdbrc", '<pdbrc>', 'eval'))

# in the do_alias() function it mentions some examples and they sounded like
# useful alias to tack on!

# Print instance variables (usage "pi classInst")
alias pdict {i:j for i,j in sorted(%1.__dict__.items(), key=lambda i: i[0])}

alias inspect_dict for k in %1.__dict__.keys(): print("%1.", k, "=", %1.__dict__[k])  # noqa
# Print instance variables in self
alias ps pdict self

# Apr 07, 2019
# How in the world have I gone this long without noticing this isn't set up
alias ? NamespaceMagics().pinfo
# Kinda sucks now only ?func is valid not func?
alias ?? NamespaceMagics().pinfo2

# Been reading through the inspect docs a little

# Print a dictionary sorted by key.
alias piter pp {k: v for k, v in sorted(dict(%*).items(), key=lambda i: i[0])}

# Vars
alias pv pp vars(%*)

# Print the member variables of a thing.
alias members pdict %*.__dict__

# invalid syntax?
alias getmembers pdict dict(inspect.getmembers(%1))

# Print the member variables of self.
alias ps pi self

# Print the locals.
alias pl pdict locals()
alias pg pdict globals()

# Next and list, and step and list.
alias nll n;;ll
alias nl n;;l
alias sl s;;l

# Oh i want up and down too
alias ul u;;l
alias dl d;;l
alias ull u;;ll
alias dll d;;ll

# Let's keep it going
alias di pp dir(%1)

# Vim: set ft=python:
