# Bind keys for exit (keys only work on empty lines
# disable_readline(True)
# Disable pyreadline completely.

# from pyreadline.rlmain import something that shuts the linters up

from __future__ import print_function, unicode_literals, absolute_import

# "on" saves log info to./pyreadline_debug_log.txt
# "on_nologfile" only enables print warning messages
# Up until we figure out how to not put the log file in the cwd
# this stays at no log file
set_mode("vi")  # will cause following bind_keys to bind to vi mode as well as activate vi mode

# debug_output("on_nologfile")
bind_exit_key("Control-d")
bind_exit_key("Control-z")

# Commands for moving
bind_key("Control-a", "beginning_of_line")
bind_key("Home", "beginning_of_line")
bind_key("Control-e", "end_of_line")
bind_key("End", "end_of_line")
bind_key("Left", "backward_char")
bind_key("Control-b", "backward_char")
bind_key("Right", "forward_char")
bind_key("Control-f", "forward_char")
bind_key("Alt-f", "forward_word")
bind_key("Alt-b", "backward_word")
bind_key("Clear", "clear_screen")
bind_key("Control-c", "clear_screen")
bind_key("Control-l", "redraw_current_line")

# Commands for Manipulating the History
bind_key("Return", "accept_line")
bind_key("Control-p"     ,     "previous_history")
bind_key("Control-n"     ,     "next_history")
bind_key("Up", "history_search_backward")
bind_key("Down", "history_search_forward")
bind_key("Alt-<", "beginning_of_history")
bind_key("Alt->", "end_of_history")
bind_key("Control-r", "reverse_search_history")
bind_key("Control-s", "forward_search_history")
bind_key("Alt-p", "non_incremental_reverse_search_history")
bind_key("Alt-n", "non_incremental_forward_search_history")

bind_key("Control-z", "undo")
bind_key("Control-_", "undo")

# Commands for Changing Text
bind_key("Delete", "delete_char")
bind_key("Control-d" , "delete_char")
bind_key("BackSpace", "backward_delete_char")

bind_key("Control-q", "quoted_insert")
# bind_key("Control-space", "menu-complete")
bind_key("Control-BackSpace", "backward_delete_word")

# Killing and Yanking
bind_key("Control-shift-k"           ,     "kill_line")
bind_key("Control-k", "kill_whole_line")

# WHOA DON'T DO THAT
# bind_key("Escape"      ,     "kill_whole_line")
un_bind_key("Escape")
bind_key("Meta-d", "kill_word")
bind_key("Control-w"     ,     "unix_word_rubout")
bind_key("Control-Delete", "forward_kill_word")
bind_key("Meta-Delete", "backward_kill_word")

# Copy paste
bind_key("Shift-Right", "forward_char_extend_selection")
bind_key("Shift-Left", "backward_char_extend_selection")
bind_key("Shift-Control-Right", "forward_word_extend_selection")
bind_key("Shift-Control-Left", "backward_word_extend_selection")

# Isn't this usually an alias for <CR> though?
bind_key("Control-m", "set_mark")
bind_key("Control-@", "set_mark")

bind_key("Control-Shift-x", "copy_selection_to_clipboard")
bind_key("Control-Shift-c", "copy_selection_to_clipboard")

bind_key("Control-q", "copy_region_to_clipboard")
bind_key("Control-Shift-v", "paste_mulitline_code")
bind_key("Control-x", "cut_selection_to_clipboard")

# bind_key("Control-v", "paste")
bind_key("Control-y", "yank")
bind_key("Alt-v", "ipython_paste")
bind_key("Alt-y", "paste")

# Unbinding keys:
# un_bind_key("Home")
# }}}

# Other: {{{
kill_ring_to_clipboard = True
bell_style("none")
# modes: none, audible, visible(not implemented)
show_all_if_ambiguous("on")
mark_directories("on")
completer_delims(" \t\n\"\\'`@$><=;|&{(?")
complete_filesystem("on")

allow_ctrl_c(True)
# (Allows use of ctrl-c as copy key, still propagate keyboardinterrupt
# when not waiting for input)
# Few other parameters i ran into while reading the src
# startup_hook # pre_input_hook # first_prompt # cursor_size # prompt
history_filename("~/python_history.log")
history_length(-1)  # value of -1 means no limit

# So not only does it really not like the line below, but it droppin into the debugger
# you configured to now use readline won't work soooo...be  careful i guess
# This should be bound to a key
# i think its usually bound to \eC-e which is oh wait no that's shell expand line
  # File "C:\Users\fac\scoop\apps\winpython\current\python-3.8.1.amd64\lib\site-packages\pyreadline\py3k_compat.py", line 14, in execfile
  #   exec(compile(txt, fname, 'exec'), glob, loc)
  # File "C:\Users\fac/pyreadlineconfig.ini", line 122, in <module>
  #   bind_key("Control-Alt-j", set_mode("emacs"))
  # File "C:\Users\fac\scoop\apps\winpython\current\python-3.8.1.amd64\lib\site-packages\pyreadline\rlmain.py", line 292, in bind_key     elif hasattr(modes[mode], name):
# bind_key("Control-Alt-j", set_mode("emacs"))

ctrl_c_tap_time_interval(0.3)

# # Vim: set ft=python:
